graph TD
subgraph core
C[Core]
end
subgraph modules
C -->videoio
C -->imgproc
C -->highgui
C -->more...
end

graph TD
subgraph core
C[Core]
end
subgraph contrib
C-->face
C-->tracking
C-->xfeatures2d
C-->others...
end
subgraph modules
C -->videoio
C -->imgproc
C -->highgui
C -->more...
end

graph TD
A[Go application] -->B[GoCV Go functions]
subgraph GoCV
B --> C[GoCV C wrapper functions]
end
C-->OpenCV

graph TD
A[GoCV] -->B[OpenCV]
B --> C[DNN module]
C-->Caffe
C -->TensorFlow
C -->Torch
C -->Darknet

graph TD
C[OpenVINO Inference Engine]
C-->D[CPU]
C-->E[GPU 32-bit]
C-->F[GPU 16-bit]
C-->G[VPU]

graph LR
subgraph Model creation
A[Define model architecture] -->|train|B[Trained model]
T(Training data set) -->B
end
subgraph Model usage
B --> |optimize|M[Optimized model]
M --> |inference|C[Result data]
R(Runtime data) -->C
end

graph LR
subgraph Go standard library
Lexer --> Parser
Parser --> Typechecker
Typechecker --> AST[AST builder]
end
subgraph Go ssa
AST --> GOSSA[Go SSA construction]
end
subgraph TinyGo ir
AST --> Analyze SSA
end
subgraph TinyGo compiler
GOSSA --> LLVMIR[LLVM IR]
Globals fixes
end
subgraph LLVM optimizer
LLVMIR --> LLVM optimization
end
subgraph LLVM compiler
Emit machine code to object file for linker
end
end




graph LR
subgraph Go
subgraph Go standard library
LPTA[Lexer/Parser/Typechecker/AST Builder]
end

subgraph Go ssa
GOSSA[Go SSA construction]
LPTA --> GOSSA
end
end

subgraph TinyGo
subgraph TinyGo ir
ASSA[Analyze SSA]
GOSSA --> ASSA
end

subgraph TinyGo compiler
Transform[Transform SSA to LLVM IR]
GOSSA -->  Transform
ASSA --> Transform
GX[Globals fixes]
end
end

subgraph LLVM
subgraph LLVM optimizer
LLVMO[LLVM optimization]
Transform --> LLVMO
end

subgraph LLVM compiler
EMC[Emit machine code to object file for linker]
GX --> EMC
LLVMO --> EMC
end
end



 is done by packages in the standard library and in the golang.org/x/tools/go library.

SSA construction (a very important step) is done by the golang.org/x/tools/go/ssa package.
This SSA form is then analyzed by the TinyGo ir package to learn all kinds of things about the code that help the optimizer.

The Go SSA is then transformed into LLVM IR by the TinyGo compiler package. 

  Both forms are SSA, but because Go SSA is higher level and contains Go-specific constructs (like interfaces and goroutines) this is non-trivial. However, the vast majority of the work is simply lowering the available Go SSA into LLVM IR, possibly calling some runtime library intrinsics in the process (for example, operations on maps).

This LLVM IR is then optimized by the LLVM optimizer, which has a large array of standard optimization passes. Currently, the standard optimization pipeline is used as is also be used by Clang, but a pipeline better tuned for TinyGo might be used in the future.

After all optimizations have run, a few fixups are needed for AVR for globals. This is implemented by the compiler package.

Finally, the resulting machine code is emitted by LLVM to an object file, to be linked by an architecture-specific linker in a later step.




I think the passes can be summarized as follows:
1. Go: lexer/parser/typechecker
2. Go: SSA construction
3. TinyGo: LLVM IR construction
4. TinyGo: init interpretation (something missing from the pipeline but very important for code size) - this interprets `init` functions at compile time (including autogenerated ones that initialize globals) and stores the result as globals
5. TinyGo/LLVM (perhaps a box overlapping both?): custom optimizations and lowering passes. At the moment, this is a mix of a few cleanup LLVM passes, a few TinyGo-specific optimization passes (for example, a heap-to-stack transformation pass if an allocated pointer does not escape), and special lowering for some Go features (currently interfaces and goroutines).
6. LLVM: regular optimization passes, equivalent to what Clang uses.
7. TinyGo: a workaround for AVR to make globals non-const (to avoid address space issues).
8. LLVM: machine code generation (edited) 
